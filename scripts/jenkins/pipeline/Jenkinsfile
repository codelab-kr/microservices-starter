node {
    stage('Clone repository') {
        checkout scm
        def output
        script {
            output = sh(returnStdout: true, script: '''#!/bin/bash
            commits=($(git diff-tree --no-commit-id --name-only -r HEAD))
            services=("api" "history" "payments" "posts" "users" "storage" "videos")
            result=()

            for commit in "${commits[@]}"; do
                directory=$(dirname "$commit");
                filename=$(basename "$commit" .yaml);
                for service in "${services[@]}"; do
                    if [[ $directory == *"${service}"* ]] || [[ $filename == $service ]]; then
                        result+=($service)
                    fi
                done
            done

            svc=$(echo "${result[@]}" | tr ' ' '\n' | sort -u | tr '\n' ',')
            echo $svc
            '''            
            ).trim()
        }
        env.SERVICES = output

    }

    env.STAGE = "development"
    env.TAG = "0.${BUILD_NUMBER}"

    stage('check parameters') { 
        def array = env.SERVICES.split(',')[:-1]

        echo "check parameters"
        echo "STAGE: ${STAGE}"
        echo "SERVICE: ${SERVICE}"
        echo "TAG: ${TAG}"
    }

    stage('Trigger build-test-push') { 
        echo "triggering build-test-push job"
        build job: 'build-test-push', parameters: [
            string(name: 'STAGE', value: env.STAGE),
            string(name: 'SERVICE', value: env.SERVICE),
            string(name: 'TAG', value: env.TAG)
        ]
    }

    stage('Trigger update-manifest') { 
        echo "triggering update-manifest job"
        build job: 'update-manifest', parameters: [
            string(name: 'STAGE', value: env.STAGE),
            string(name: 'SERVICE', value: env.SERVICE),
            string(name: 'TAG', value: env.TAG)
        ]
    }
}

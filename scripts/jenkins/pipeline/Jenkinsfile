node('docker') {
    stage('Clone repository') {
        echo "BRANCH_NAME: ${env.BRANCH_NAME}"
        if (env.BRANCH_NAME == 'master') {
            echo "You are not allowed to run this job on master branch"
            currentBuild.result = 'ABORTED'
            return
        }

        echo "Check service env"
        if (env.SERVICES != null && env.SERVICES != '') {
            echo "services to deploy are: ${env.SERVICES}"
            return
        }
        
        checkout scm
        def output
        script {
            output = sh(returnStdout: true, script: '''#!/bin/bash
            commits=($(git diff-tree --no-commit-id --name-only -r HEAD))
            services=("api" "history" "payments" "posts" "users" "storage" "videos")
            result=()

            for commit in "${commits[@]}"; do
                directory=$(dirname "$commit");
                filename=$(basename "$commit" .yaml);
                for service in "${services[@]}"; do
                    if [[ $directory == *"${service}"* ]] || [[ $filename == $service ]]; then
                        result+=($service)
                    fi
                done
            done

            svc=$(echo "${result[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
            echo $svc
            '''            
            ).trim()
        }
        env.SERVICES = output
    }

    stage('Trigger services') { 
        script {
            def array = env.SERVICES.trim().split(' ')
            echo "Array: ${array}"
            env.STAGE = "development"
            env.TAG = "0.${BUILD_NUMBER}"
            echo "STAGE: ${STAGE}"
            echo "TAG: ${TAG}"

            def jobs = [:]

            for (int i = 0; i < array.size(); i++) {
                def service = array[i]
                jobs["service-${i}-${service}"] = {
                    build job: 'start-service-job', parameters: [
                        string(name: 'STAGE', value: env.STAGE),
                        string(name: 'SERVICE', value: service),
                        string(name: 'TAG', value: env.TAG)]
                }
            }
            parallel jobs
        }
    }
}
